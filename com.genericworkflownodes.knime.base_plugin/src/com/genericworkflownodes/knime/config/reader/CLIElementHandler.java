/**
 * Copyright (c) 2012, Stephan Aiche.
 *
 * This file is part of GenericKnimeNodes.
 * 
 * GenericKnimeNodes is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package com.genericworkflownodes.knime.config.reader;

import org.xml.sax.Attributes;
import org.xml.sax.ContentHandler;
import org.xml.sax.SAXException;
import org.xml.sax.XMLReader;
import org.xml.sax.helpers.DefaultHandler;

import com.genericworkflownodes.knime.cliwrapper.CLI;
import com.genericworkflownodes.knime.cliwrapper.CLIElement;
import com.genericworkflownodes.knime.cliwrapper.CLIMapping;

/**
 * The {@link ContentHandler} for the CLI element.
 * 
 * @author aiche
 */
public class CLIElementHandler extends DefaultHandler {

	private static String TAG_CLI = "cli";
	private static String TAG_CLIELEMENT = "clielement";
	private static String TAG_MAPPING = "mapping";

	private static String ATTR_OPTION_IDENTIFIER = "optionIdentifier";
	private static String ATTR_ISLIST = "isList";
	private static String ATTR_REQUIRED = "isRequired";
	private static String ATTR_REFNAME = "referenceName";

	/**
	 * The CLI that should be generated by this element handler.
	 */
	private CLI readCLI;

	private CLIElement currentElement;

	/**
	 * The parent handler that invoked this handler for a sub tree of the XML
	 * document.
	 */
	private CTDHandler parentHandler;

	/**
	 * The {@link XMLReader} that processes the entire document.
	 */
	private XMLReader xmlReader;

	public CLIElementHandler(XMLReader xmlReader, CTDHandler parentHandler) {
		this.xmlReader = xmlReader;
		this.parentHandler = parentHandler;
		readCLI = new CLI();
	}

	@Override
	public void startElement(String uri, String localName, String name,
			Attributes attributes) throws SAXException {
		if (TAG_CLIELEMENT.equals(name)) {
			// we start a new element
			currentElement = new CLIElement();
			String isList = attributes.getValue(ATTR_ISLIST);
			currentElement.setIsList((isList != null && "true".equals(isList)));
			String isRequired = attributes.getValue(ATTR_REQUIRED);
			currentElement.setRequired((isRequired != null && "true"
					.equals(isRequired)));
			currentElement.setOptionIdentifier(attributes
					.getValue(ATTR_OPTION_IDENTIFIER));
		} else if (TAG_MAPPING.equals(name)) {
			CLIMapping mapping = new CLIMapping();
			String refName = attributes.getValue(ATTR_REFNAME);
			mapping.setReferenceName(refName);
			currentElement.getMapping().add(mapping);
		}
	}

	@Override
	public void endElement(String uri, String localName, String name)
			throws SAXException {
		if (TAG_CLI.equals(name)) {
			// return to parent scope
			parentHandler.setCLI(readCLI);
			xmlReader.setContentHandler(parentHandler);
		} else if (TAG_CLIELEMENT.equals(name)) {
			// finished reading this element
			readCLI.getCLIElement().add(currentElement);
		} else {
			super.endElement(uri, localName, name);
		}
	}
}
