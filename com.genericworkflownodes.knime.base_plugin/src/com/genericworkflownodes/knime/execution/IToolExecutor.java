/**
 * Copyright (c) 2012, Stephan Aiche.
 *
 * This file is part of GenericKnimeNodes.
 * 
 * GenericKnimeNodes is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.genericworkflownodes.knime.execution;

import java.io.File;

import org.ballproject.knime.base.config.INodeConfiguration;
import org.ballproject.knime.base.config.NodeConfigurationStore;

import com.genericworkflownodes.knime.config.IPluginConfiguration;

public interface IToolExecutor {

	/**
	 * Defines which command generator should be used to create the command line
	 * call for the execution.
	 * 
	 * @param generator
	 */
	public void setCommandGenerator(ICommandGenerator generator);

	/**
	 * The execute method used by derived classes to execute their command.
	 * 
	 * @param command
	 *            The command line of the tool as list of strings.
	 * @return The return value of the executed process.
	 * @throws Exception
	 */
	public int execute() throws Exception;

	/**
	 * Initialization method of the executor.
	 * 
	 * @param nodeConfiguration
	 * @param pluginConfiguration
	 */
	public void prepareExecution(INodeConfiguration nodeConfiguration,
			NodeConfigurationStore configStore,
			IPluginConfiguration pluginConfiguration) throws Exception;

	/**
	 * Kills the running process.
	 */
	public void kill();

	/**
	 * Returns the return value of the process. If the tool didn't not run or is
	 * not finished it is set to -1.
	 * 
	 * @return
	 */
	public int getReturnCode();

	/**
	 * Sets the working directory of the process. If the directory does not
	 * exist or the @p path does not point to a directory (but a file), an
	 * exception will be thrown.
	 * 
	 * @param directory
	 *            The new working directory.
	 * @throws Exception
	 *             If the path does not exist or points to a file (and not a
	 *             directory).
	 */
	public void setWorkingDirectory(File directory) throws Exception;

	/**
	 * Returns the output generated by the tool as single string.
	 * 
	 * @return The ouput of the tool.
	 */
	public String getToolOutput();
}
