<project name="pluginbuilder" default="custom.plugin.build" basedir=".">

	<property name="debug" value="true" />

	<property name="base.plugin.name" value="com.genericworkflownodes.knime" />
	<property name="base.plugin.version.major" value="0" />
	<property name="base.plugin.version.minor" value="7" />
	<property name="base.plugin.version.patch" value="0" />

	<property name="nodegenerator.name" value="org.ballproject.knime.node_generator" />

	<!-- do not edit below this line -->

	<property file="build.properties" />
	<property file="${plugin.dir}/plugin.properties" />

	<!-- DEFAULT: this works only if it was not set previously the build.properties -->
	<property name="default.plugin.dir" value="com.genericworkflownodes.knime.node_generator/sample-ball" description="Directory which contains the files from which you want to generate the KNIME plugin." />

	<property name="base.plugin.version" value="${base.plugin.version.major}.${base.plugin.version.minor}.${base.plugin.version.patch}" />
	<property name="custom.plugin.name" value="${pluginPackage}" />
	<property name="custom.plugin.version" value="${pluginVersion}" />

	<tstamp>
		<format property="fulltime" pattern="yyyy-MM-dd'T'HH-mm-ss-SZ" />
		<!-- about ISO8601 -->
	</tstamp>
	<property name="tmp" value="${java.io.tmpdir}/GKN-${fulltime}" />

	<property name="base.plugin.src" value="com.genericworkflownodes.knime.base_plugin" />
	<property name="base.plugin.build.dir" value="${tmp}/basePlugin" />
	<property name="base.plugin.build.jar" value="build/${base.plugin.name}_${base.plugin.version}.jar" />
	<property name="base.plugin.test.dir" value="${tmp}/basePlugin-test" />

	<property name="nodegenerator.src" value="com.genericworkflownodes.knime.node_generator" />
	<property name="nodegenerator.build.dir" value="${tmp}/nodeGenerator" />
	<property name="nodegenerator.build.jar" value="build/${nodegenerator.name}.jar" />

	<property name="custom.plugin.build.src" value="${tmp}/customPlugin-sources" />
	<property name="custom.plugin.build.dir" value="${tmp}/customPlugin" />
	<property name="custom.plugin.build.jar" value="build/${custom.plugin.name}_${custom.plugin.version}.jar" />

	<property name="src" value="src" />
	<property name="test" value="test" />

	<!-- the classpath for the base plugin (KNIME and jars in lib/) -->
	<path id="base.plugin.classpath">
		<!-- include all jars found in KNIME SDK plugins -->
		<fileset dir="${knime.sdk}/plugins">
			<include name="**/*.jar" />
			<exclude name="**/ant.jar" />
		</fileset>
		<!-- include our own dependencies -->
		<fileset dir="${base.plugin.src}/lib">
			<include name="*.jar" />
			<exclude name="junit.jar" />
			<exclude name="org.hamcrest.core_1.1.0.v20090501071000.jar" />
		</fileset>
		<!-- include our own files -->
		<pathelement location="${base.plugin.src}/${src}" />
	</path>

	<!-- add the junit.jar only to the testing classpath -->
	<path id="base.plugin.test.build.classpath">
		<path refid="base.plugin.classpath" />
		<pathelement location="${base.plugin.build.jar}" />
		<pathelement location="${base.plugin.src}/${test}" />
		<pathelement location="${base.plugin.src}/lib/junit.jar" />
		<pathelement location="${base.plugin.src}/lib/org.hamcrest.core_1.1.0.v20090501071000.jar" />
	</path>

	<path id="base.plugin.test.run.classpath">
		<path refid="base.plugin.test.build.classpath" />
		<pathelement location="${base.plugin.test.dir}" />
	</path>

	<path id="nodegenerator.build.classpath">
		<pathelement location="${base.plugin.build.jar}" />
		<!-- include our own dependencies -->
		<fileset dir="${nodegenerator.src}/lib">
			<include name="*.jar" />
		</fileset>
		<!-- Make sure we have the urltype plugin in our classpath -->
		<pathelement location="${base.plugin.src}/lib/org.knime.core.data.urltype.jar" />		
	</path>

	<path id="nodegenerator.exec.classpath">
		<path refid="nodegenerator.build.classpath" />
		<pathelement location="${nodegenerator.build.jar}" />
	</path>

	<!-- the classpath used to compile and generate the plugin sources -->
	<path id="custom.plugin.build.classpath">
		<pathelement location="${base.plugin.build.jar}" />
		<path refid="base.plugin.classpath" />
	</path>

	<target name="clean">
		<delete dir="${tmp}" />
	</target>

	<!-- plugin.dir checks -->
	<target name="plugin.dir.condition">
		<!-- Check if the user set a plugin.dir or if we need to use the default.plugin.dir -->
		<condition property="plugin.dir.isset">
			<isset property="plugin.dir" />
		</condition>

		<!-- if not set overwrite -->
		<condition property="plugin.dir" value="${default.plugin.dir}">
			<not>
				<isset property="plugin.dir" />
			</not>
		</condition>
	</target>

	<target name="plugin.dir.check" depends="plugin.dir.condition" unless="plugin.dir.isset">
		<echo message="Using default plugin.dir: ${plugin.dir}" />
		<echo message="If you want to use a custom plugin dir, just add a plugin.dir property to the" />
		<echo message="build.properties file, e.g.," />
	</target>

	<!-- knime.sdk checks -->
	<target name="knime.sdk.condition">
		<!-- check if knime.sdk was set correctly -->
		<condition property="knime.sdk.exists">
			<available file="${knime.sdk}" type="dir" />
		</condition>
	</target>

	<target name="knime.sdk.check" depends="knime.sdk.condition" unless="knime.sdk.exists">
		<echo message="knime.sdk was not set properly. Please edit the a file build.properties containing the following settings:" />
		<echo message="knime.sdk=/path/to/your/knime/sdk" />
		<fail message="Cannot build without a valid knime.sdk." />
	</target>

	<target name="prepare" depends="knime.sdk.check,plugin.dir.check,clean">
		<echo message="knime.sdk.exists: ${knime.sdk.exists}" />
		<echo message="plugin.dir: ${plugin.dir}" />
		<mkdir dir="${tmp}" />
		<mkdir dir="build" />
	</target>

	<target name="base.plugin.build" depends="prepare">
		<echo message="Debug: ${debug}" />

		<mkdir dir="${base.plugin.build.dir}" />

		<copy file="${base.plugin.src}/plugin.xml" todir="${base.plugin.build.dir}" />
		<copy file="${base.plugin.src}/build.properties" todir="${base.plugin.build.dir}" />

		<mkdir dir="${base.plugin.build.dir}/lib" />
		<copy todir="${base.plugin.build.dir}/lib" failonerror="true" overwrite="true">
			<fileset dir="${base.plugin.src}/lib/">
				<include name="*.jar" />
			</fileset>
		</copy>

		<mkdir dir="${base.plugin.build.dir}/META-INF" />
		<copy todir="${base.plugin.build.dir}/META-INF" failonerror="true" overwrite="true">
			<fileset dir="${base.plugin.src}/META-INF">
				<include name="MANIFEST.MF" />
			</fileset>
		</copy>

		<antcall target="base.plugin.classes.build" />

		<mkdir dir="${base.plugin.build.dir}/schema" />
		<copy file="${base.plugin.src}/schema/com.genericworkflownodes.knime.mime.demangler.Demangler.exsd" todir="${base.plugin.build.dir}/schema" />
		<copy file="${base.plugin.src}/schema/com.genericworkflownods.knime.outputconverter.OutputConverter.exsd" todir="${base.plugin.build.dir}/schema" />

		<mkdir dir="${base.plugin.build.dir}/icons" />
		<copy todir="${base.plugin.build.dir}/icons" failonerror="true" overwrite="true">
			<fileset dir="${base.plugin.src}/icons">
				<include name="**/*.png" />
				<include name="**/*.jpg" />
				<include name="**/*.gif" />
			</fileset>
		</copy>
		<zip destfile="${base.plugin.build.jar}" basedir="${base.plugin.build.dir}" />
	</target>

	<target name="base.plugin.classes.build">
		<javac srcdir="${base.plugin.src}/${src}" destdir="${base.plugin.build.dir}" includeantruntime="false" debug="on" debuglevel="lines,vars,source">
			<classpath refid="base.plugin.classpath" />
			<compilerarg value="-Xlint:unchecked" />
			<compilerarg value="-Xlint:deprecation" />
		</javac>

		<!-- copy factory-xmls and other stuff -->
		<copy todir="${base.plugin.build.dir}" failonerror="true" overwrite="true">
			<fileset dir="${base.plugin.src}/${src}">
				<!--<exclude name="**/*.java"/>-->
				<exclude name="**/package.htm*" />
			</fileset>
		</copy>
	</target>

	<target name="nodegenerator.build" depends="base.plugin.build">
		<mkdir dir="${nodegenerator.build.dir}" />
		<javac srcdir="${nodegenerator.src}/${src}" destdir="${nodegenerator.build.dir}" includeantruntime="false" debug="on" debuglevel="lines,vars,source">
			<classpath refid="nodegenerator.build.classpath" />
			<compilerarg value="-Xlint:unchecked" />
			<compilerarg value="-Xlint:deprecation" />
		</javac>

		<!-- copy templates and assets into nodegenerator.jar
		 e.g.,
		 		* assets/.classpath
		 		* templates/BinaryResources.template
		 -->
		<copy todir="${nodegenerator.build.dir}" failonerror="true" overwrite="true">
			<fileset dir="${nodegenerator.src}/${src}">
				<!--<exclude name="**/*.java"/>-->
				<exclude name="**/package.htm*" />
			</fileset>
		</copy>


		<zip destfile="${nodegenerator.build.jar}" basedir="${nodegenerator.build.dir}" />
	</target>

	<target name="custom.plugin.build" depends="nodegenerator.build">
		<mkdir dir="${custom.plugin.build.dir}" />
		<antcall target="custom.plugin.generate_sources" />
		<antcall target="custom.plugin.classes.build" />
		<zip destfile="${custom.plugin.build.jar}" basedir="${custom.plugin.build.dir}" />
	</target>

	<target name="custom.plugin.generate_sources" description="run node generator">
		<echo message="${toString:nodegenerator.exec.classpath}" />
		<java classname="org.ballproject.knime.nodegeneration.Main" failonerror="true" fork="true">
			<!-- we use the detour via env.CLASSPATH here since WinXP machines otherwise couldn't -->
			<!-- handle the to long classpath -->
			<env key="CLASSPATH" path="${env.CLASSPATH}:${toString:nodegenerator.exec.classpath}" />
			<arg value="${plugin.dir}" />
			<arg value="${custom.plugin.build.src}" />
		</java>
	</target>

	<target name="custom.plugin.classes.build">
		<javac srcdir="${custom.plugin.build.src}" destdir="${custom.plugin.build.dir}" includeantruntime="false" debug="on" debuglevel="lines,vars,source">
			<classpath refid="custom.plugin.build.classpath" />
			<compilerarg value="-Xlint:unchecked" />
			<compilerarg value="-Xlint:deprecation" />
		</javac>

		<!-- copy factory-xmls and other stuff -->
		<copy todir="${custom.plugin.build.dir}" failonerror="true" overwrite="true">
			<fileset dir="${custom.plugin.build.src}/src">
				<!--exclude name="**/*.java" /-->
				<exclude name="**/package.htm*" />
			</fileset>
		</copy>
		<copy todir="${custom.plugin.build.dir}" failonerror="true" overwrite="true">
			<fileset dir="${custom.plugin.build.src}">
				<include name="**/*.png" />
				<include name="**/*.gif" />
				<include name="**/*.jpg" />
				<include name="**/build.properties" />
				<include name="**/plugin.xml" />
				<include name="**/MANIFEST.MF" />
			</fileset>
		</copy>
	</target>

	<!-- TESTING RELATED TARGETS -->
	<target name="base.plugin.test-build" depends="base.plugin.build">
		<mkdir dir="${base.plugin.test.dir}" />

		<javac srcdir="${base.plugin.src}/${test}" destdir="${base.plugin.test.dir}" includeantruntime="false" debug="on" debuglevel="lines,vars,source">
			<classpath refid="base.plugin.test.build.classpath" />
			<compilerarg value="-Xlint:unchecked" />
			<compilerarg value="-Xlint:deprecation" />
		</javac>
	</target>

	<target name="base.plugin.test" depends="base.plugin.test-build">
		<junit printsummary="yes" haltonfailure="yes" showoutput="yes">
			<classpath refid="base.plugin.test.run.classpath" />
			<formatter type="plain" usefile="false" />

			<batchtest fork="yes">
				<fileset dir="${base.plugin.src}/${test}">
					<include name="**/*Test*.java" />
					<exclude name="**/AllTests.java" />
					<!-- this is actually not a test -->
					<exclude name="**/TestDataSource.java" />
				</fileset>
			</batchtest>
		</junit>
	</target>

	<target name="test" depends="base.plugin.test">
	</target>
</project>
