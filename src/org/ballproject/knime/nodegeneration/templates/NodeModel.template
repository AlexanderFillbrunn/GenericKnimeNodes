package __BASE__.knime.nodes.__NODENAME__;

import org.ballproject.knime.base.node.*;
import org.ballproject.knime.base.config.*;
import org.ballproject.knime.base.mime.*;
import org.ballproject.knime.GenericNodesPlugin;

import __BASE__.knime.nodes.mimetypes.*;
import __BASE__.knime.PluginActivator;

import org.eclipse.jface.preference.IPreferenceStore;

import java.io.File;
import java.io.IOException;

import org.knime.core.data.DataType;
import org.knime.core.data.DataCell;
import org.knime.core.data.collection.ListCell;

public class __NODENAME__NodeModel extends GenericKnimeNodeModel
{	
	protected __NODENAME__NodeModel(NodeConfiguration config)
	{
		super(config);
		CTDNodeConfigurationReader reader = new CTDNodeConfigurationReader(); 
		try
		{
			this.config = reader.read(this.getClass().getResourceAsStream("config/config.xml"));
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
		this.inports  = new DataType[][]{__INCLAZZEZ__};
		this.outports = new DataType[][]{__OUTCLAZZEZ__};
		
		final IPreferenceStore pStore = PluginActivator.getDefault().getPreferenceStore();
		binpath = pStore.getString("binaries_path");
		props   = PluginActivator.PROPERTIES;
		env     = PluginActivator.ENVIRONMENT;
	}
	
	@Override
	public DataCell makeDataCell(File f) throws Exception
	{
		MIMEFileCell cell = GenericNodesPlugin.getMIMEtypeRegistry().getCell(f.getName());
		cell.read(f);
		return cell;
	}
}