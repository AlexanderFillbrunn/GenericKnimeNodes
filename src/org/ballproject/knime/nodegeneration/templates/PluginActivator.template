package __BASE__.knime;


import org.eclipse.jface.preference.IPreferenceStore;
import org.eclipse.ui.plugin.AbstractUIPlugin;
import org.knime.core.node.KNIMEConstants;
import org.osgi.framework.BundleContext;
import java.util.Properties;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import __BASE__.knime.nodes.binres.BinaryResources;
import __BASE__.knime.nodes.mimetypes.*;
import org.ballproject.knime.*;
import org.ballproject.knime.base.mime.*;

/**
 * This is the eclipse bundle activator. Note: KNIME node developers probably
 * won't have to do anything in here, as this class is only needed by the
 * eclipse platform/plugin mechanism. If you want to move/rename this file, make
 * sure to change the plugin.xml file in the project root directory accordingly.
 * 
 * @author roettig
 */
public class PluginActivator extends AbstractUIPlugin
{
	// The shared instance.
	private static PluginActivator plugin;

	public static Properties PROPERTIES;
	public static Map<String,String> ENVIRONMENT;
	
	/**
	 * The constructor.
	 */
	public PluginActivator()
	{
		super();
		plugin = this;
	}

	/**
	 * This method is called upon plug-in activation.
	 * 
	 * @param context
	 *            The OSGI bundle context
	 * @throws Exception
	 *             If this plugin could not be started
	 */
	@Override
	public void start(final BundleContext context) throws Exception
	{
		super.start(context);
		
		String home = System.getProperty("java.io.tmpdir")+File.separator+"GENERIC_KNIME_NODES";
		String os   = System.getProperty("os.name");
		
		PROPERTIES = new Properties();
		
		PROPERTIES.load(this.getClass().getResourceAsStream("plugin.properties"));
		if(GenericNodesPlugin.isDebug())
		{
			GenericNodesPlugin.log("__NAME__ plugin properties are ... ");
			for(Object key: PROPERTIES.keySet())
			{
				GenericNodesPlugin.log(key+" -> "+PROPERTIES.get(key));
			}
		}
		
		// default platform
		String OS = "win";
		
		if(os.toLowerCase().contains("nux")||os.toLowerCase().contains("nix"))
		{
			OS = "lnx";
		}
		if(os.toLowerCase().contains("mac"))
		{
			OS = "mac";
		}
		
		// get word size of JVM as a proxy for native word size of OS
		String data_model = System.getProperty("sun.arch.data.model");
		String targetdir  = home+System.getProperty("file.separator")+BinaryResources.BINPACKNAME;
		
		if(data_model.equals("64"))
		{
		    if(BinaryResources.class.getResourceAsStream("binaries_"+OS+"_64.zip")!=null)
		    {
		    	BinaryResources.decompressTo(home+System.getProperty("file.separator")+BinaryResources.BINPACKNAME, BinaryResources.class.getResourceAsStream("binaries_"+OS+"_64.zip"));
				PROPERTIES.load(BinaryResources.class.getResourceAsStream("binaries_"+OS+"_64.ini"));
		    }
		    else
		    {
		    	if(BinaryResources.class.getResourceAsStream("binaries_"+OS+"_32.zip")!=null)
		    	{
		    		BinaryResources.decompressTo(home+System.getProperty("file.separator")+BinaryResources.BINPACKNAME, BinaryResources.class.getResourceAsStream("binaries_"+OS+"_32.zip"));
					PROPERTIES.load(BinaryResources.class.getResourceAsStream("binaries_"+OS+"_32.ini"));
				}
				else
				{
					throw new Exception("could not install binaries due to missing payload with apropriate word size");
				}
		    }
		}
		else
			if(data_model.equals("32"))
			{
				if(BinaryResources.class.getResourceAsStream("binaries_"+OS+"_32.zip")!=null)
			    {
			    	BinaryResources.decompressTo(home+System.getProperty("file.separator")+BinaryResources.BINPACKNAME, BinaryResources.class.getResourceAsStream("binaries_"+OS+"_32.zip"));
					PROPERTIES.load(BinaryResources.class.getResourceAsStream("binaries_"+OS+"_32.ini"));
				}
				else
				{
					throw new Exception("could not install binaries due to missing payload with apropriate word size");
				}
			}
			else
			{
				throw new Exception("could not install binaries due to missing payload with apropriate word size");
			}
		
		// verify integrity
		String expectedBinDirPath = home + File.separator + BinaryResources.BINPACKNAME + File.separator + "bin";
		if(!(new File(expectedBinDirPath).exists()))
		{
			throw new Exception("could not properly install binaries, no bin directory was found inside payload archive");
		}
		
		File bindir = new File(targetdir+File.separator+"bin");
		for(File file: bindir.listFiles())
		{
		  file.setExecutable(true);
		}
		
		final IPreferenceStore pStore = getDefault().getPreferenceStore();
		pStore.setValue("binaries_path", home+System.getProperty("file.separator")+BinaryResources.BINPACKNAME);
		
		ENVIRONMENT = new HashMap<String,String>();
		
		for(Object key: PROPERTIES.keySet())
		{
			String k = key.toString();
			String v = PROPERTIES.getProperty(k);
			ENVIRONMENT.put(k, v);
		}
		
		// register mime types
		GenericNodesPlugin.getMIMEtypeRegistry().addResolver(MimeFileCellFactory.getInstance());
	}

	/**
	 * This method is called when the plug-in is stopped.
	 * 
	 * @param context
	 *            The OSGI bundle context
	 * @throws Exception
	 *             If this plugin could not be stopped
	 */
	@Override
	public void stop(final BundleContext context) throws Exception
	{
		super.stop(context);
		plugin = null;
	}

	/**
	 * Returns the shared instance.
	 * 
	 * @return Singleton instance of the Plugin
	 */
	public static PluginActivator getDefault()
	{
		return plugin;
	}

}
