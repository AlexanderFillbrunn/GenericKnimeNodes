package __BASE__.knime;


import org.eclipse.jface.preference.IPreferenceStore;
import org.eclipse.ui.plugin.AbstractUIPlugin;
import org.knime.core.node.KNIMEConstants;
import org.osgi.framework.BundleContext;
import java.util.Properties;
import java.util.HashMap;
import java.util.Map;
import __BASE__.knime.nodes.binres.BinaryResources;

/**
 * This is the eclipse bundle activator. Note: KNIME node developers probably
 * won't have to do anything in here, as this class is only needed by the
 * eclipse platform/plugin mechanism. If you want to move/rename this file, make
 * sure to change the plugin.xml file in the project root directory accordingly.
 * 
 * @author roettig
 */
public class __NAME__PluginActivator extends AbstractUIPlugin
{
	// The shared instance.
	private static __NAME__PluginActivator plugin;

	public static Properties PROPERTIES;
	public static Map<String,String> ENVIRONMENT;
	
	/**
	 * The constructor.
	 */
	public __NAME__PluginActivator()
	{
		super();
		plugin = this;
	}

	/**
	 * This method is called upon plug-in activation.
	 * 
	 * @param context
	 *            The OSGI bundle context
	 * @throws Exception
	 *             If this plugin could not be started
	 */
	@Override
	public void start(final BundleContext context) throws Exception
	{
		super.start(context);
		
		String home = KNIMEConstants.getKNIMEHomeDir();
		String os =  System.getProperty("os.name");
		
		PROPERTIES = new Properties();
		
		if(os.toLowerCase().contains("linux"))
		{
			BinaryResources.decompressTo(home+System.getProperty("file.separator")+BinaryResources.BINPACKNAME, BinaryResources.class.getResourceAsStream(BinaryResources.BINARIES_LNX_x64));
			PROPERTIES.load(BinaryResources.class.getResourceAsStream("binaries_lnx_x64.ini"));
		}
		
		final IPreferenceStore pStore = getDefault().getPreferenceStore();
		pStore.setValue("binaries_path", home+System.getProperty("file.separator")+BinaryResources.BINPACKNAME);
		
		ENVIRONMENT = new HashMap<String,String>();
		
		for(Object key: PROPERTIES.keySet())
		{
			if(key.toString().startsWith("env_"))
			{
				String k = key.toString().substring(4);
				String v = (String) PROPERTIES.get(key);
				ENVIRONMENT.put(k, v);
				System.out.println(k+" -> "+v);
			}
		}
	}

	/**
	 * This method is called when the plug-in is stopped.
	 * 
	 * @param context
	 *            The OSGI bundle context
	 * @throws Exception
	 *             If this plugin could not be stopped
	 */
	@Override
	public void stop(final BundleContext context) throws Exception
	{
		super.stop(context);
		plugin = null;
	}

	/**
	 * Returns the shared instance.
	 * 
	 * @return Singleton instance of the Plugin
	 */
	public static __NAME__PluginActivator getDefault()
	{
		return plugin;
	}

}
